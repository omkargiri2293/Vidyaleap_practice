/*
 * Baremetal.c
 *
 *  Created on: 20-Mar-2025
 *      Author: omkar
 */


#include <Baremetal.h>

void enablePort(GPIO_Regs*Port){
    Port->GPRCM.PWREN = (GPIO_PWREN_KEY_UNLOCK_W | GPIO_PWREN_ENABLE_ENABLE);
}

void initDigitalOutput(GPIO_Regs* Port, uint8_t pinCMIndex, uint8_t Pin){
    IOMUX->SECCFG.PINCM[pinCMIndex] = (IOMUX_PINCM_PC_CONNECTED | 0x00000001);
    Port->DOE31_0 |= (1<<Pin);
}

void enableOutput(GPIO_Regs*Port, uint32_t Pin){
    Port->DOESET31_0 = Pin;
}

void setPins(GPIO_Regs*Port, uint32_t Pin){
    Port->DOUTSET31_0 = Pin;
}

void togglePins(GPIO_Regs*Port, uint32_t Pin){
    Port->DOUTTGL31_0 = Pin;
}

void clearPins(GPIO_Regs*Port, uint32_t Pin){
    Port->DOUTCLR31_0 = Pin;
}

void GPIO_reset(GPIO_Regs* Port){
    Port->GPRCM.RSTCTL =
            (GPIO_RSTCTL_KEY_UNLOCK_W | GPIO_RSTCTL_RESETSTKYCLR_CLR |
                    GPIO_RSTCTL_RESETASSERT_ASSERT);
}

void initDigitalInputfeatures(uint32_t pinCMIndex,
                      DL_GPIO_INVERSION inversion,
                      DL_GPIO_RESISTOR internalResistor,
                      DL_GPIO_HYSTERESIS hysteresis,
                      DL_GPIO_WAKEUP wakeup){
    IOMUX->SECCFG.PINCM[pinCMIndex] =
            IOMUX_PINCM_INENA_ENABLE | IOMUX_PINCM_PC_CONNECTED |
            ((uint32_t)(0x00000001)) | (uint32_t) inversion |
            (uint32_t) internalResistor | (uint32_t) hysteresis |
            (uint32_t) wakeup;

}

uint32_t readPins(GPIO_Regs* Port, uint32_t pins){
    return(Port->DIN31_0 & pins);
}

void initDigitalOutputfeatures(uint32_t pinCMIndex,
                               DL_GPIO_INVERSION inversion,
                               DL_GPIO_RESISTOR internalResistor,
                               DL_GPIO_DRIVE_STRENGTH strength,
                               DL_GPIO_HIZ impedence){
    IOMUX->SECCFG.PINCM[pinCMIndex] =
            IOMUX_PINCM_PC_CONNECTED | ((uint32_t)(0x00000001)) |
            (uint32_t) inversion | (uint32_t) internalResistor |
            (uint32_t) strength | (uint32_t) impedence;
}

void setPinsPolarity(GPIO_Regs*Port, uint32_t polarity){
    Port->POLARITY31_16 |= polarity;
}

void clearintteruptstatus(GPIO_Regs*Port, uint32_t Pin){
    Port->CPU_INT.ICLR |= Pin;
}

void enableintterupt(GPIO_Regs*Port, uint32_t Pin){
    Port->CPU_INT.IMASK |= Pin;
}
uint32_t getEnabledInterruptStatus(GPIO_Regs* gpio, uint32_t pins) {
    return (gpio->CPU_INT.MIS & pins);
}

